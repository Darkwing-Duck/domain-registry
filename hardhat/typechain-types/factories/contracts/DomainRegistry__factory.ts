/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  DomainRegistry,
  DomainRegistryInterface,
} from "../../contracts/DomainRegistry";

const _abi = [
  {
    inputs: [],
    name: "DomainIsAlreadyRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "DomainWasNotRegistered",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "PaymentForRegisteringDomainFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawFailed",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "string",
        name: "indexedName",
        type: "string",
      },
      {
        indexed: true,
        internalType: "address",
        name: "indexedDomainHolder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "domainHolder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "createdDate",
        type: "uint256",
      },
    ],
    name: "DomainRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "toValue",
        type: "uint256",
      },
    ],
    name: "changeRegistrationPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "domainName",
        type: "string",
      },
    ],
    name: "findDomainHolderBy",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "registrationPrice_",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "domainName",
        type: "string",
      },
    ],
    name: "isDomainRegistered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "domainName",
        type: "string",
      },
    ],
    name: "registerDomain",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "registrationPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a1f806100206000396000f3fe60806040526004361061008f5760003560e01c80638da5cb5b116100565780638da5cb5b1461015a578063a5cad08a1461016f578063cd6dc68714610182578063f2fde38b146101a2578063f5162639146101c257005b80631c4527811461009857806321658658146100cd5780633ccfd60b146100f857806367ce3a511461010d578063715018a61461014557005b3661009657005b005b3480156100a457600080fd5b506100b86100b33660046107eb565b6101e2565b60405190151581526020015b60405180910390f35b3480156100d957600080fd5b506000805160206109ca833981519152546040519081526020016100c4565b34801561010457600080fd5b50610096610226565b34801561011957600080fd5b5061012d6101283660046107eb565b61025e565b6040516001600160a01b0390911681526020016100c4565b34801561015157600080fd5b506100966102d8565b34801561016657600080fd5b5061012d6102ea565b61009661017d3660046107eb565b610318565b34801561018e57600080fd5b5061009661019d3660046108b8565b6104f6565b3480156101ae57600080fd5b506100966101bd3660046108e2565b610618565b3480156101ce57600080fd5b506100966101dd366004610904565b610656565b6000806000805160206109ca833981519152600101836040516102059190610941565b908152604051908190036020019020546001600160a01b0316141592915050565b61022e610670565b61023f6102396102ea565b476106a2565b61025c57604051631d42c86760e21b815260040160405180910390fd5b565b60008161026a816101e2565b610287576040516334b2814b60e11b815260040160405180910390fd5b6040517f95137cbd5b999a2a07f15c64ecb41442a54817dd1810d04f8ff3a7e325fb5101906102b7908590610941565b908152604051908190036020019020546001600160a01b0316915050919050565b6102e0610670565b61025c6000610702565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b80610322816101e2565b1561034057604051634669493d60e01b815260040160405180910390fd5b6000805160206109ca83398151915280543410156103b657604051637597158360e01b815260206004820152602760248201527f4e6f7420656e6f75676820657468657220746f20726567697374657220746865604482015266103237b6b0b4b760c91b60648201526084015b60405180910390fd5b3381600101846040516103c99190610941565b90815260405190819003602001812080546001600160a01b03939093166001600160a01b0319909316929092179091553390610406908590610941565b60405180910390207fd1f2ec21ca6ca1afd00511d7822f3c5c0885e70a3bf9b880ea7147aba2d4448a8533426040516104419392919061095d565b60405180910390a380543411156104f157805460009061046190346109a8565b905061046d33826106a2565b6104ef57604051637597158360e01b815260206004820152604660248201527f546865206f7665727061796d656e74207761732064657465637465642c20627560448201527f7420726566756e64696e67207468652065786365737320776173206e6f7420736064820152651d58d8d9595960d21b608482015260a4016103ad565b505b505050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff1660008115801561053c5750825b905060008267ffffffffffffffff1660011480156105595750303b155b905081158015610567575080155b156105855760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff1916600117855583156105af57845460ff60401b1916600160401b1785555b6105b887610773565b856000805160206109ca83398151915255831561060f57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050565b610620610670565b6001600160a01b03811661064a57604051631e4fbdf760e01b8152600060048201526024016103ad565b61065381610702565b50565b61065e610670565b6000805160206109ca83398151915255565b336106796102ea565b6001600160a01b03161461025c5760405163118cdaa760e01b81523360048201526024016103ad565b600080836001600160a01b03168360405160006040518083038185875af1925050503d80600081146106f0576040519150601f19603f3d011682016040523d82523d6000602084013e6106f5565b606091505b5090925050505b92915050565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b61077b610784565b610653816107cd565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661025c57604051631afcd79f60e31b815260040160405180910390fd5b610620610784565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156107fd57600080fd5b813567ffffffffffffffff8082111561081557600080fd5b818401915084601f83011261082957600080fd5b81358181111561083b5761083b6107d5565b604051601f8201601f19908116603f01168101908382118183101715610863576108636107d5565b8160405282815287602084870101111561087c57600080fd5b826020860160208301376000928101602001929092525095945050505050565b80356001600160a01b03811681146108b357600080fd5b919050565b600080604083850312156108cb57600080fd5b6108d48361089c565b946020939093013593505050565b6000602082840312156108f457600080fd5b6108fd8261089c565b9392505050565b60006020828403121561091657600080fd5b5035919050565b60005b83811015610938578181015183820152602001610920565b50506000910152565b6000825161095381846020870161091d565b9190910192915050565b606081526000845180606084015261097c81608085016020890161091d565b6001600160a01b039490941660208301525060408101919091526080601f909201601f19160101919050565b818103818111156106fc57634e487b7160e01b600052601160045260246000fdfe95137cbd5b999a2a07f15c64ecb41442a54817dd1810d04f8ff3a7e325fb5100a2646970667358221220bcb141b71627a2883e07801c9819330354fd089806cc817c8e71377e4514a48864736f6c63430008140033";

type DomainRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DomainRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DomainRegistry__factory extends ContractFactory {
  constructor(...args: DomainRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DomainRegistry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DomainRegistry__factory {
    return super.connect(runner) as DomainRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DomainRegistryInterface {
    return new Interface(_abi) as DomainRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): DomainRegistry {
    return new Contract(address, _abi, runner) as unknown as DomainRegistry;
  }
}
